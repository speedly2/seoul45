package chapter09.polymorphism;

public class C080_virtualFunction {

	public static void main(String[] args) {
/*
	가상 메서드 & 동적 바인딩
	  - 메서드 호출 원리
		메서드(함수)의 이름은 주소값을 나타낸다.
		메서드는 명령어의 set이고 프로그램이 로드되면 메서드 영역(코드 영역)에 명령어 set이 위치한다.
		해당 메서드가 호출되면 명령어 set이 있는 주소를 찾아 명령어가 실행된다.
		이때 메서드에서 사용하는 변수들은 스택 메모리에 위치하게 된다.
		따라서 다른 인스턴스라도 같은 메서드의 코드는 같으므로 같은 메서드가 호출된다.
		인스턴스가 생성되면 변수는 힙 메모리에 따로 생성되지만, 메서드 명령어 set은 처음 한번만 로드 된다.
	  - 정리
		클래스에 정의된 메서드는 고유 주소값을 가지고 있으며
		인스턴스가 생성될때 해당 주소값을 통해 메서드를 호출한다.
		고유 주소값은 가상 메서드 테이블에서 관리하며
		재정의된 경우는 재정의된 메서드의 주소를 가리킨다.
		재정의하고 있는 클래스에서 생성되어지는 메서드 고유 주소값을 호출한다는 소리.
		https://syhwang.tistory.com/107
	
	다형성의 원리가 적용될 수 있는 멤버 함수(메서드)로써 동적 바인딩으로 처리되는 메서드를 의미
	동적 바인딩 수행 시 가상 메서드 테이블을 참조하여 매핑함

	정적 바인딩이 아닌 동적 바인딩으로 처리되기 때문에 컴파일 시점에 정해지지 않은, 실제로 존재하지 않는, 
	임시로 존재하는 메서드라는 의미로 가상 메서드라고 지칭함
 */

		A aa = new A();
		A ab = new B();
		B bb = new B();
		
		aa.method();
		ab.method();
		bb.method();
	}

}

class A {
	void method() { System.out.println("메서드 실행 A"); }
}

class B extends A {
	@Override
	void method() { System.out.println("메서드 실행 B"); }
}